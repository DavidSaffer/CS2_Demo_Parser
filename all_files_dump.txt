Filename: ./worker.js
importScripts("wasm_exec.js");

const go = new Go();

WebAssembly.instantiateStreaming(fetch("main.wasm"), go.importObject)
  .then((result) => {
    postMessage("WebAssembly instantiated");
    go.run(result.instance);
  })
  .catch((err) => {
    postMessage("Failed to load WASM: " + err);
  });

onmessage = function (event) {
  const data = event.data.data;
  const attackerThreshold = event.data.attackerThreshold;
  const victimThreshold = event.data.victimThreshold;
  postMessage("Data received in worker");

  if (typeof analyzeDemo === "function") {
    analyzeDemo(data, attackerThreshold, victimThreshold);
  } else {
    postMessage("analyzeDemo function is not defined.");
  }
};

Filename: ./main.js
const worker = new Worker("worker.js");

document.getElementById("fileInput").addEventListener("change", (event) => {
  const file = event.target.files[0];
  if (!file) {
    appendMessage("No file selected.");
    return;
  }

  const attackerThreshold = parseInt(
    document.getElementById("attackerThreshold").value,
    10
  );
  const victimThreshold = parseInt(
    document.getElementById("victimThreshold").value,
    10
  );

  const reader = new FileReader();
  reader.onload = function () {
    const arrayBuffer = reader.result;
    const uint8Array = new Uint8Array(arrayBuffer);
    worker.postMessage({
      data: uint8Array,
      attackerThreshold: attackerThreshold,
      victimThreshold: victimThreshold,
    });
  };
  reader.readAsArrayBuffer(file);
});

worker.onmessage = function (event) {
  appendMessage("Processed data received: " + event.data);
};

function appendMessage(message) {
  const container = document.getElementById("messages");
  const messageElement = document.createElement("div");
  messageElement.textContent = message;
  container.appendChild(messageElement);
}

Filename: ./index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Go WebAssembly and Web Worker Example</title>
    <style>
        #messages {
            margin-top: 20px;
            border: 1px solid #ccc;
            padding: 10px;
        }
    </style>
</head>
<body>
    <input type="file" id="fileInput">
    <label for="attackerThreshold">Attacker Threshold (Equipment Value >):</label>
    <input type="number" id="attackerThreshold" value="2000">
    <label for="victimThreshold">Victim Threshold (Equipment Value <):</label>
    <input type="number" id="victimThreshold" value="2000">
    <div id="messages"></div>
    <script src="main.js"></script>
</body>
</html>
